
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#include <dt-bindings/zmk/dynamic-macros.h>

// Key position groups
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68
#define KEYS_R 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79
#define THUMBS 52 53 54 55 56 57 69 70 71 72 73 74

#define L_BASE 0
#define L_SYMBOLS 1
#define L_NUM_NAV 2
#define L_FN_MOUSE 3
#define L_MAC_SYS 4
#define L_MEDIA 5
#define L_LOWER 6
#define L_MAGIC 7
#define L_NUMBERS 8

#define MACRO_WAIT_MS 80

&caps_word {  // mods deactivate caps-word, requires numword patch from urob
        /delete-property/ ignore-modifiers;
};
&num_word {  // num-word, requires numword patch from urob
        layers = <L_NUMBERS>;
        //continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};
&sk {
	quick-release;
};

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo L_LOWER>, <&to L_LOWER>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    behaviors {
            mtl: mod_tap_l {
                    compatible = "zmk,behavior-hold-tap";
                    label = "MOD_TAP_L";
                    #binding-cells = <2>;
                    tapping-term-ms = <280>;
                    quick-tap-ms = <150>;
                    flavor = "balanced";
                    bindings = <&kp>, <&kp>;
                    hold-trigger-key-positions = <KEYS_R THUMBS>;
                    hold-trigger-on-release; // requires PR #1423 - merged
                    global-quick-tap;
                    //global-quick-tap-ms = <100>; // requires PR #1387 - not merged
            };
            mtr: mod_tap_r {
                    compatible = "zmk,behavior-hold-tap";
                    label = "MOD_TAP_R";
                    #binding-cells = <2>;
                    tapping-term-ms = <280>;
                    quick-tap-ms = <150>;
                    flavor = "balanced";
                    bindings = <&kp>, <&kp>;
                    hold-trigger-key-positions = <KEYS_L THUMBS>;
                    hold-trigger-on-release; // requires PR #1423 - merged
                    global-quick-tap;
                    //global-quick-tap-ms = <100>; // requires PR #1387 - not merged
            };
            ltl: layer_tap_l {
                    compatible = "zmk,behavior-hold-tap";
                    label = "LAYER_TAP_L";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    //quick-tap-ms = <150>;
                    flavor = "balanced";
                    bindings = <&mo>, <&kp>;
                    hold-trigger-key-positions = <KEYS_R THUMBS>;
                    //hold-trigger-on-release; // requires PR #1423 - merged
                    //global-quick-tap;
                    //global-quick-tap-ms = <100>; // requires PR #1387 - not merged
            };
            ltr: layer_tap_r {
                    compatible = "zmk,behavior-hold-tap";
                    label = "LAYER_TAP_R";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    //quick-tap-ms = <150>;
                    flavor = "balanced";
                    bindings = <&mo>, <&kp>;
                    hold-trigger-key-positions = <KEYS_L THUMBS>;
                    //hold-trigger-on-release; // requires PR #1423 - merged
                    //global-quick-tap;
                    //global-quick-tap-ms = <100>; // requires PR #1387 - not merged
            };
	    nav_word: behavior_nav_word {
		    compatible = "zmk,behavior-caps-word";
		    label = "NAV_WORD";
		    #binding-cells = <0>;
                    layers = <L_NUM_NAV>; // insert location of numbers layer here
		    continue-list = <UP DOWN LEFT RIGHT PG_DN PG_UP HOME END>;  // adjust as desired
	    };
	    td_caps_nav: behavior_tap_dance_caps_nav_word {
		    compatible = "zmk,behavior-tap-dance";
		    label = "TAP_DANCE_CAPS_NAV";
		    #binding-cells = <0>;
		    tapping-term-ms = <200>;
		    bindings = <&caps_word>, <&nav_word>;
	    };
	    mm_caps_nav: behavior_mod_morph_caps_nav_word {
		    compatible = "zmk,behavior-mod-morph";
		    label = "MOD_MORPH_CAPS_NAV";
		    #binding-cells = <0>;
		    bindings = <&caps_word>, <&nav_word>;
		    mods = <(MOD_LSFT)>;
	    };
	    mm_rar_np: behavior_mod_morph_rar_np {
		    compatible = "zmk,behavior-mod-morph";
		    label = "MOD_MORPH_RAR_NP";
		    #binding-cells = <0>;
		    bindings = <&rarn>, <&rarp>;
		    mods = <(MOD_LSFT)>;
	    };
	    swap: swapper {
		    compatible = "zmk,behavior-tri-state";
		    label = "SWAPPER";
		    #binding-cells = <0>;
		    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
		    //timeout-ms = <5000>;
            };
    };

    macros {
	    ZMK_MACRO(home_dir,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp TILDE &kp SLASH>;
		     )
	    ZMK_MACRO(paren_dir,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp PERIOD &kp PERIOD &kp SLASH>;
		    )
	    ZMK_MACRO(rarn,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp RA(R) &kp N>;
		    )
	    ZMK_MACRO(rarp,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp RA(R) &kp P>;
		     )
	    ZMK_MACRO(emacs_goto,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp LA(G) &kp G>;
		     )
	    ZMK_MACRO(emacs_save,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp LC(X) &kp LC(S)>;
		     )
	    ZMK_MACRO(emacs_kill_buffer,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp LC(X) &kp K>;
		     )
	    ZMK_MACRO(emacs_mark_buffer,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp LC(X) &kp H>;
		     )
	    ZMK_MACRO(emacs_find_file,
		tap-ms = <0>;
		wait-ms = <MACRO_WAIT_MS>;
		bindings = <&kp LC(X) &kp LC(F)>;
		     )
	    dyn_macro: dyn_macro { // requires PR #1351 - manually merged
		    label = "ZM_dynamic-macro";
		    compatible = "zmk,behavior-dynamic-macro";
		    #binding-cells = <1>;
		    wait-ms = <MACRO_WAIT_MS>;
            };
    };


    /*
    5 5
    6 6
    6 6
    6 6
    9 9
    8 8
    */
    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";

	/* 0 */
        layer_Base {
		bindings = <
		/*r1*/
		&none    &none    &none    &none     &none
		&none    &none    &none    &none     &none
		/*r2*/
		&none    &none    &none    &swap     &none    &none
		&none    &none    &mm_rar_np    &none     &none    &none
		/*r3*/
		&none    &kp Q             &ltl L_FN_MOUSE W     &ltl L_NUM_NAV E      &ltl L_MEDIA R   &kp T
                &kp Y    &ltr L_MEDIA U    &ltr L_NUM_NAV I      &ltr L_FN_MOUSE O     &kp P            &none
		/*r4*/
		&mt LSHFT ESC       &mtl LSHIFT A         &mtl LALT S        &mtl LCTRL D    &ltl L_SYMBOLS F    &ltl L_MAC_SYS G
                &ltr L_MAC_SYS H    &ltr L_SYMBOLS J      &mtr RCTRL K       &mtr RALT L     &mtr RSHIFT SEMI    &mtr RGUI SQT
		/*r5*/
		&none  &kp Z   &kp X   &kp C      &kp V   &kp B        &none    &none     &none
		&none  &none   &none   &kp N      &kp M   &kp COMMA    &kp DOT  &kp FSLH  &none
		/*r6*/
		&magic L_MAGIC 0  &none    &mt LSHIFT HOME    &kp PG_UP  &kp PG_DN     &kp RET         &kp BSPC  &none
		&none             &kp TAB  &kp SPACE          &kp UP     &kp DOWN      &mt RSHIFT END  &none     &none
            >;
        };
	/* 1 */
        layer_symbols {
		bindings = <
		/*r1*/
		&trans    &trans    &trans    &trans     &trans
                &trans    &trans    &trans    &trans     &trans
		/*r2*/
		&trans     &trans    &trans    &trans    &trans     &trans
                &trans     &trans    &trans    &trans    &trans     &trans
		/*r3*/
		&trans     &kp AT     &kp LT    &kp GT   &kp HASH  &kp PRCNT
                &kp PIPE  &kp COLON  &kp LBRC  &kp RBRC   &kp CARET  &trans
		/*r4*/
		&trans   &kp EXCL  &kp MINUS  &kp PLUS  &kp EQUAL    &kp DQT
                &kp AMPS  &kp UNDER  &kp LPAR  &kp RPAR   &kp GRAVE  &trans
		/*r5*/
		&trans  &home_dir   &kp BSLH  &kp STAR   &kp FSLH  &kp QMARK  &trans  &trans  &trans
		&trans  &trans  &trans  &kp TILDE   &kp DLLR  &kp LBKT  &kp RBKT  &paren_dir  &trans
		/*r6*/
		&trans  &trans  &trans   &trans    &trans    &trans      &trans  &trans
		&trans  &trans  &trans   &trans    &trans    &trans      &trans  &trans
            >;
        };

	/* 2 */
        layer_num_nav {
		bindings = <
		/*r1*/
		&trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans
		/*r2*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r3*/
		&trans   &trans   &kp LEFT_ARROW   &kp HOME   &kp RIGHT_ARROW   &trans
		&trans  &kp N7   &kp N8  &kp N9   &kp STAR   &trans
		/*r4*/
		&trans   &trans   &kp K_BACK   &kp END   &kp K_FORWARD   &caps_word
		&num_word  &kp N4   &kp N5  &kp N6   &kp PLUS   &kp MINUS
		/*r5*/
		&trans   &trans   &trans   &kp K_WWW   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &trans  &kp N1   &kp N2  &kp N3   &kp FSLH   &trans
		/*r6*/
		&trans   &trans   &kp SYSREQ   &kp DELETE   &trans   &trans      &trans   &trans
                &trans   &trans   &kp RA(R)    &kp N0       &kp DOT  &kp EQUAL   &trans   &kp CAPSLOCK
            >;
        };

	/* 3 */
	layer_fn_mouse {
		bindings = <
		/*r1*/
		&trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans
		/*r2*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r3*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &kp F7   &kp F8   &kp F9   &trans   &trans
		/*r4*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &kp F4   &kp F5   &kp F6   &trans   &trans
		/*r5*/
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &trans   &kp F1   &kp F2   &kp F3   &trans   &trans
		/*r6*/
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &kp F10   &kp F11   &kp F12   &trans   &trans
        >;
        };

	/* 4 */
        layer_mac_sys {
		bindings = <
		/*r1*/
		&trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans
		/*r2*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r3*/
		&trans   &trans   &trans   &dyn_macro RECORD   &trans   &trans
                &trans   &kp LC(LS(SPACE))   &kp LC(PLUS)   &kp LC(MINUS)   &kp LC(N0)   &trans
		/*r4*/
		&trans   &trans   &trans   &dyn_macro PLAY   &trans   &trans
                &trans   &kp LA(PRCNT)   &kp LC(UNDER)   &emacs_goto  &emacs_save   &trans
		/*r5*/
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &trans   &kp LA(CARET)   &emacs_kill_buffer   &emacs_mark_buffer   &emacs_find_file   &trans
		/*r6*/
		&trans   &trans   &kp C_PWR   &kp K_LOCK   &kp C_SLEEP   &trans   &trans   &trans
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
            >;
        };

	/* 5 */
	layer_media {
		bindings = <
		/*r1*/
		&trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans
		/*r2*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r3*/
		&trans   &trans   &kp C_PREV   &kp C_VOL_UP   &kp C_NEXT   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r4*/
		&trans   &trans   &kp C_PLAY   &kp C_VOL_DN   &kp C_STOP   &trans
                &trans   &trans   &trans   &trans   &trans   &trans
		/*r5*/
		&trans   &trans   &trans   &kp C_MUTE   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
		/*r6*/
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
        >;
        };

	/* 6 */
        layer_Lower {
		bindings = <
		/*r1*/
		&kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP
                &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
		/*r2*/
		&trans         &none           &none           &none            &none   &kp HOME
                &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
		/*r3*/
		&trans         &none           &none    &kp UP_ARROW            &none    &kp END
                &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
		/*r4*/
		&trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP
                &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
		/*r5*/
		&trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN &trans  &trans   &to 0
		&trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
		/*r6*/
		&magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans
		&trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

	/* 7 */
        layer_Magic {
		bindings = <
		/*r1*/
		&bt BT_CLR            &none            &none            &none            &none
                &none   &none   &none   &none  &bt BT_CLR_ALL
		/*r2*/
		&none            &none            &none            &none            &none            &none
                &none   &none   &none   &none   &none           &none
		/*r3*/
		&none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
                &none   &none   &none   &none   &none           &none
		/*r4*/
		&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF
                &none   &none   &none   &none   &none     &bootloader
		/*r5*/
		&reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none
		&none   &none   &none   &none   &none   &none   &none   &none          &reset
		/*r6*/
		&none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB
		&none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

	/* 8 */
        layer_numbers {
		bindings = <
		/*r1*/
		&trans   &trans   &trans   &trans   &trans
                &trans    &trans   &trans   &trans   &trans
		/*r2*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans   &trans    &trans   &trans   &trans   &trans
		/*r3*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans  &kp N7   &kp N8  &kp N9   &kp STAR   &trans
		/*r4*/
		&trans   &trans   &trans   &trans   &trans   &trans
                &trans  &kp N4   &kp N5  &kp N6   &kp PLUS   &kp MINUS
		/*r5*/
		&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans &trans
		&trans   &trans   &trans   &trans  &kp N1   &kp N2  &kp N3   &kp FSLH   &trans
		/*r6*/
		&trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans
		&trans &trans   &trans          &kp N0  &kp DOT   &kp EQUAL   &trans   &trans
            >;
        };
    };
};
